<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/02/07/tools/hello-world/"/>
      <url>/2024/02/07/tools/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>w3m</title>
      <link href="/2023/11/04/w3m/"/>
      <url>/2023/11/04/w3m/</url>
      
        <content type="html"><![CDATA[<p>install step</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install w3m w3m-image -y</span><br></pre></td></tr></table></figure><p>user param</p><p>enter  enter the link<br>Q      exit the session</p>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>w3m</title>
      <link href="/2023/11/03/tools/w3m/"/>
      <url>/2023/11/03/tools/w3m/</url>
      
        <content type="html"><![CDATA[<p>安装方式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt list|grep w3m</span><br><span class="line">apt install w3m <span class="literal">-y</span></span><br></pre></td></tr></table></figure><p>显示方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表格输入为红色，内嵌图像为绿色，链接为蓝色。</span><br><span class="line"></span><br><span class="line">右键打开菜单，完成各项操作</span><br></pre></td></tr></table></figure><p>使用方式</p><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>enter</td><td>进入链接</td></tr><tr><td>ctrl+c</td><td>结束当前网页加载</td></tr><tr><td>q</td><td>退出程序</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh-nopasswd</title>
      <link href="/2023/01/07/tools/ssh-nopasswd/"/>
      <url>/2023/01/07/tools/ssh-nopasswd/</url>
      
        <content type="html"><![CDATA[<ol><li>ssh 客户端端执行 ssh-keygen  生成公钥和私钥到~&#x2F;.ssh<blockquote><p>具体文件为 ~&#x2F;.ssh&#x2F;id_rsa(私钥)  ~&#x2F;.ssh&#x2F;id_rsa.pub（公钥）</p></blockquote></li><li>ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub <a href="mailto:&#114;&#x6f;&#111;&#116;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#x32;&#x33;&#x35;&#x2e;&#x32;&#x32;">&#114;&#x6f;&#111;&#116;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#x32;&#x33;&#x35;&#x2e;&#x32;&#x32;</a> 上传公钥到ssh服务器，指定服务器ip和ssh用户名</li><li>ssh <a href="mailto:&#x72;&#111;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x32;&#x33;&#x35;&#46;&#50;&#x32;">&#x72;&#111;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x32;&#x33;&#x35;&#46;&#50;&#x32;</a> 执行免密登陆</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data-manage</title>
      <link href="/2022/07/06/data-manage/"/>
      <url>/2022/07/06/data-manage/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>关键字列举<br>SELECT  FROM    WHERE   LIMIT   GROUP BY    ORDER BY    SET<br>常用操作</p><ol><li>查询<br>当分页查询时，采用两次查询的方式，即第一次查询当前页的序号，第二次根据序号查找对应数据。这种方式主要用于单条数据较大且数据条很多的情况下对数据库查询的优化。<br>还有一种方式是在表中添加索引，利用MySql本身机制提升查询效率。</li><li>表格<ul><li>建表</li><li>修改表结构</li><li>删表</li></ul></li><li>数据库<ul><li>建库</li><li>删库</li></ul></li></ol><h1 id="常用问题"><a href="#常用问题" class="headerlink" title="常用问题"></a>常用问题</h1><ol><li>忘记密码</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> basic </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>design-mode</title>
      <link href="/2022/07/06/design-model/"/>
      <url>/2022/07/06/design-model/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-来源：菜鸟教程"><a href="#设计模式-来源：菜鸟教程" class="headerlink" title="设计模式 来源：菜鸟教程"></a>设计模式 来源：菜鸟教程</h1><h3 id="创建型——创建对象的同时隐藏创建逻辑的方式。程序在判断针对某个给定实力需要创建哪些对象更加灵活。"><a href="#创建型——创建对象的同时隐藏创建逻辑的方式。程序在判断针对某个给定实力需要创建哪些对象更加灵活。" class="headerlink" title="创建型——创建对象的同时隐藏创建逻辑的方式。程序在判断针对某个给定实力需要创建哪些对象更加灵活。"></a>创建型——创建对象的同时隐藏创建逻辑的方式。程序在判断针对某个给定实力需要创建哪些对象更加灵活。</h3><ul><li>单例：Singleton：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<ul><li>解决：当您想控制实例数目，节省系统资源，一个全局使用的类频繁地创建与销毁。</li><li>优点：1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。2、避免对资源的多重占用（比如写文件操作）。</li><li>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</li></ul></li><li>工厂：Factory：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行<ul><li>解决：明确地计划不同条件下创建不同实例，接口选择的问题。</li><li>优点：1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</li><li>缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</li></ul></li><li>抽象工厂：Abstract Factory：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。创建对应工厂，工厂依据工厂模式创建对象<ul><li>解决：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。接口选择的问题。</li><li>优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</li><li>缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</li></ul></li><li>建造者: Builder：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。<ul><li>解决：在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。一些基本部件不会变，而其组合经常变化的时候。</li><li>优点：1、建造者独立，易扩展。 2、便于控制细节风险。</li><li>缺点：、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</li></ul></li><li>原型：Prototype：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<ul><li>解决：在运行期建立和删除原型。利用已有的一个原型对象，快速地生成和原型对象一样的实例。</li><li>优点：1、性能提高。 2、逃避构造函数的约束。</li><li>缺点：1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。</li></ul></li></ul><h3 id="结构型——关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式"><a href="#结构型——关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式" class="headerlink" title="结构型——关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式"></a>结构型——关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</h3><ul><li>适配器：Adapter：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。<ul><li>解决：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</li><li>优点：1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。</li><li>缺点：1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</li></ul></li><li>桥接：Bridge：将抽象部分与实现部分分离，使它们都可以独立的变化。<ul><li>解决：有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。实现系统可能有多个角度分类，每一种角度都可能变化</li><li>优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</li><li>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li></ul></li><li>过滤器：Filter：使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。它结合多个标准来获得单一标准。</li><li>组合：Composite：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<ul><li>解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。1、您想表示对象的部分-整体层次结构（树形结构）2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li><li>优点：1、高层模块调用简单。 2、节点自由增加。</li><li>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</li></ul></li><li>装饰器：Decorator：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。<ul><li>解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。在不想增加很多子类的情况下扩展类。</li><li>优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</li><li>缺点：多层装饰比较复杂。</li></ul></li><li>外观：Facade：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。<ul><li>解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端之间的接口。1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。 2、定义系统的入口。</li><li>优点：1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。</li><li>缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</li></ul></li><li>享元：Flyweight：运用共享技术有效地支持大量细粒度的对象。在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。<ul><li>解决：1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。</li><li>优点：大大减少对象的创建，降低系统的内存，使效率提高。</li><li>缺点：提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</li></ul></li><li>代理：Proxy：为其他对象提供一种代理以控制对这个对象的访问。<ul><li>解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</li><li>优点：1、职责清晰。 2、高扩展性。 3、智能化。</li><li>缺点：1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li></ul></li></ul><h3 id="行为型——关注对象间通信"><a href="#行为型——关注对象间通信" class="headerlink" title="行为型——关注对象间通信"></a>行为型——关注对象间通信</h3><ul><li>责任链：Chain of Responsibility：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。<ul><li>解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。在处理消息的时候以过滤很多道。</li><li>优点：1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</li><li>缺点：1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</li></ul></li><li>命令：Command：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。<ul><li>解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</li><li>优点： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</li><li>缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</li></ul></li><li>解释器：Interpreter：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。<ul><li>解决：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</li><li>优点：1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</li><li>缺点：1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</li></ul></li><li>迭代：Iterator：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。<ul><li>解决：不同的方式来遍历整个整合对象。</li><li>优点：1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li><li>缺点：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</li></ul></li><li>中介者：Mediator：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<ul><li>解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</li><li>优点： 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。</li><li>缺点：中介者会庞大，变得复杂难以维护。</li></ul></li><li>备忘录：Memento：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。<ul><li>解决：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</li><li>优点： 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。</li><li>缺点：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</li></ul></li><li>观察者：Observer：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。<ul><li>解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</li><li>优点：1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</li><li>缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li></ul></li><li>状态：State：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。<ul><li>解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</li><li>优点：1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li><li>缺点： 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li></ul></li><li>空对象：Null：Object创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方</li><li>策略：Strategy：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。<ul><li>解决：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</li><li>优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</li><li>缺点：1、策略类会增多。 2、所有策略类都需要对外暴露。</li></ul></li><li>模板：Template：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤<ul><li>解决：一些方法通用，却在每一个子类都重新写了这一方法。</li><li>优点：1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</li><li>缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</li></ul></li><li>访问者：Visitor：主要将数据结构与数据操作分离。<ul><li>解决：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。</li><li>优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。</li><li>缺点：1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象</li></ul></li></ul><h3 id="j2EE——"><a href="#j2EE——" class="headerlink" title="j2EE——"></a>j2EE——</h3><ul><li><p>MVC：Model（模型）模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。View（视图）视图代表模型包含的数据的可视化。Controller（控制器）控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p></li><li><p>业务代表：Business Delegate：用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。</p><ul><li>客户端（Client）表示层代码可以是 JSP、servlet 或 UI java 代码。</li><li>业务代表（Business Delegate）一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。</li><li>查询服务（LookUp Service）查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。</li><li>业务服务（Business Service）业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。</li></ul></li><li><p>组合实体：Composite Entity</p><ul><li>组合实体（Composite Entity）它是主要的实体 bean。它可以是粗粒的，或者可以包含一个粗粒度对象，用于持续生命周期。</li><li>粗粒度对象（Coarse-Grained Object）该对象包含依赖对象。它有自己的生命周期，也能管理依赖对象的生命周期。</li><li>依赖对象（Dependent Object）依赖对象是一个持续生命周期依赖于粗粒度对象的对象。</li><li>策略（Strategies）策略表示如何实现组合实体。</li></ul></li><li><p>数据访问对象：Data Access Object</p><ul><li>数据访问对象接口（Data Access Object Interface）该接口定义了在一个模型对象上要执行的标准操作。</li><li>数据访问对象实体类（Data Access Object concrete class）该类实现了上述的接口。该类负责从数据源获取数据，数据源可以是数据库，也可以是 xml，或者是其他的存储机制。</li><li>模型对象&#x2F;数值对象（Model Object&#x2F;Value Object）该对象是简单的 POJO，包含了 get&#x2F;set 方法来存储通过使用 DAO 类检索到的数据。</li></ul></li><li><p>前端控制器：Front Controller</p><ul><li>前端控制器（Front Controller）处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。</li><li>调度器（Dispatcher）前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。</li><li>视图（View）视图是为请求而创建的对象。</li></ul></li><li><p>拦截过滤器：Intercepting Filter</p><ul><li>过滤器（Filter）过滤器在请求处理程序执行请求之前或之后，执行某些任务。</li><li>过滤器链（Filter Chain）过滤器链带有多个过滤器，并在 Target 上按照定义的顺序执行这些过滤器。</li><li>Target Target 对象是请求处理程序。</li><li>过滤管理器（Filter Manager）过滤管理器管理过滤器和过滤器链。</li><li>客户端（Client）Client 是向 Target 对象发送请求的对象。</li></ul></li><li><p>服务定位器：Service Locator</p><ul><li>服务（Service）实际处理请求的服务。对这种服务的引用可以在 JNDI 服务器中查找到。</li><li>Context &#x2F; 初始的 Context JNDI Context 带有对要查找的服务的引用。</li><li>服务定位器（Service Locator）服务定位器是通过 JNDI 查找和缓存服务来获取服务的单点接触。</li><li>缓存（Cache）缓存存储服务的引用，以便复用它们。</li><li>客户端（Client）Client 是通过 ServiceLocator 调用服务的对象。</li></ul></li><li><p>传输对象：Transfer Object</p><ul><li>业务对象（Business Object）为传输对象填充数据的业务服务。</li><li>传输对象（Transfer Object）简单的 POJO，只有设置&#x2F;获取属性的方法。</li><li>客户端（Client）客户端可以发送请求或者发送传输对象到业务对象。</li></ul></li></ul><h3 id="六大原则："><a href="#六大原则：" class="headerlink" title="六大原则："></a>六大原则：</h3><ul><li>开闭原则：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。【需要使用接口和抽象类】</li><li>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充</li><li>依赖倒转原则：针对接口编程，依赖于抽象而不依赖于具体</li><li>接口隔离原则：使用多个隔离的接口，比使用单个接口要好。【调降低依赖，降低耦合】</li><li>狄米特原则（最少知道）：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</li><li>合成复用原则：尽量使用合成&#x2F;聚合的方式，而不是使用继承</li></ul><p>（<a href="https://blog.csdn.net/fangchao2011/article/details/89203535%EF%BC%89">https://blog.csdn.net/fangchao2011/article/details/89203535）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> basic </tag>
            
            <tag> manage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/2022/07/06/java/"/>
      <url>/2022/07/06/java/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h2><h3 id="equals-hasCode，instance"><a href="#equals-hasCode，instance" class="headerlink" title="&#x3D;&#x3D; equals, hasCode，instance"></a>&#x3D;&#x3D; equals, hasCode，instance</h3><p>&#x3D;&#x3D; 两个对象的引用完全相同（即同一对象），hashCode()以C++实现，返回对象的内存地址</p><h3 id="正则表达式https-jquery-cuishifeng-cn-regexp-html"><a href="#正则表达式https-jquery-cuishifeng-cn-regexp-html" class="headerlink" title="正则表达式https://jquery.cuishifeng.cn/regexp.html"></a>正则表达式<a href="https://jquery.cuishifeng.cn/regexp.html">https://jquery.cuishifeng.cn/regexp.html</a></h3><p>String类中的各种方法（matches()、replaceAll()、replaceFirst()、split()）和Pattern对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(``<span class="string">&quot;.*?(?=\\()&quot;</span>``);   </span><br></pre></td></tr></table></figure><h2 id="接口和抽象类区别"><a href="#接口和抽象类区别" class="headerlink" title="接口和抽象类区别"></a>接口和抽象类区别</h2><p>接口&#x3D;规范（属性：public static final;方法：抽象方法）；抽象类&#x3D;规范+实现</p><p>接口和抽象类均可多态（父类定义，子类实现），但抽象类只能单继承，接口可以多个实现；抽象类可实例化对象，接口无构造函数，不能实例化；抽象类可以不包含抽象方法，但接口只能有抽象方法。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>要想访问内部类中的内容，必须通过外部类对象来实例化内部类。能够访问外部类所有的属性和方法，原理就是在通过外部类对象实例化内部类对象时，外部类对象把自己的引用传进了内部类，使内部类可以用通过Outer.this去调用外部类的属性和方法，一般都是隐式调用了，但是当内部类中有属性或者方法名和外部类中的属性或方法名相同的时候，就需要通过显式调用Outer.this了。</p><p>局部内部类是在一个方法内部声明的一个类。局部内部类中可以访问外部类的成员变量及方法。局部内部类中如果要访问该内部类所在方法中的局部变量,那么这个局部变量就必须是final修饰的</p><h3 id="IO流（NIO，BIO，）"><a href="#IO流（NIO，BIO，）" class="headerlink" title="IO流（NIO，BIO，）"></a>IO流（NIO，BIO，）</h3><ul><li>分类<ul><li>阻塞：读写数据时客户端会发生阻塞</li><li>非阻塞</li><li>多路复用：Selector的线程不断轮询多个Socket的状态，只有在Socket有读写事件时，才会通知用户线程进行I&#x2F;O读写操作。</li><li>信号驱动：户线程发起一个I&#x2F;O请求操作时，系统会为该请求对应的Socket注册一个信号函数，然后用户线程可以继续执行其他业务逻辑；在内核数据就绪时，系统会发送一个信号到用户线程，用户线程在接收到该信号后，会在信号函数中调用对应的I&#x2F;O读写操作完成实际的I&#x2F;O请求操作</li><li>异步：<strong>类似信号驱动</strong>，但用户线程不需要关心整个I&#x2F;O操作是如何进行的，只需发起一个请求，在接收到内核返回的成功或失败信号时说明I&#x2F;O操作已经完成，直接使用数据即可。</li></ul></li><li>示例<ul><li>阻塞IO（BIO）:A拿着一支鱼竿在河边钓鱼，并且一直在鱼竿前等，在等的时候不做其他的事情，十分专心。只有鱼上钩的时，才结束掉等的动作，把鱼钓上来。</li><li>非阻塞IO(NIO):B也在河边钓鱼，但是B不想将自己的所有时间都花费在钓鱼上，在等鱼上钩这个时间段中，B也在做其他的事情（一会看看书，一会读读报纸，一会又去看其他人的钓鱼等），但B在做这些事情的时候，每隔一个固定的时间检查鱼是否上钩。一旦检查到有鱼上钩，就停下手中的事情，把鱼钓上来。 B在检查鱼竿是否有鱼，是一个轮询的过程。</li><li>异步IO(AIO):C也想钓鱼，但C有事情，于是他雇来了D、E、F，让他们帮他等待鱼上钩，一旦有鱼上钩，就把鱼钓上来，然后打电话给C</li><li>多路复用IO：H同样也在河边钓鱼，但是H生活水平比较好，H拿了很多的鱼竿，一次性有很多鱼竿在等，H不断的查看每个鱼竿是否有鱼上钩。增加了效率，减少了等待的时间。</li><li>信号驱动IO：G也在河边钓鱼，但与A、B、C不同的是，G比较聪明，他给鱼竿上挂一个铃铛，当有鱼上钩的时候，这个铃铛就会被碰响，G就会将鱼钓上来</li></ul></li><li><strong>NIO(非阻塞IO)</strong><ol><li>Buffer为所有的原始类型提供 (Buffer)缓存支持。</li><li>Charset字符集编码解码解决方案</li><li>Channel一个新的原始 I&#x2F;O抽象，用于读写Buffer类型，通道可以认为是一种连接，可以是到特定设备，程序或者是网络的连接。</li></ol></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>Collection对集合进行排序，查找，复制等功能。（二分查找，乱序）总继承</li><li>List 有序集合<ul><li>ArrayList：数组形式存储，默认长度为0，添加数据默认长度为10，长度不足时可以扩容但有最大长度限制。</li><li>LinkedList：双向链表，含有长度，头结点，尾节点三个属性，在迭代中可以添加删除数据</li><li>Vector: 线程安全的ArrayList，即当线程A使用Synchronized标记方法时，其他线程阻塞。但一般不使用，原因1. 线程并不安全，产生fail-fase错误；2. 在业务中有加锁需求，重复加锁浪费资源。<ul><li>在迭代中修改数据会产生fail-fast错误。但java.util.concurrent包下的相同情况会产生fail-safe错误，其原因是对数据修改时是对原数据的副本进行修改，不影响原数据；当修改完成后将原数据指向副本。</li></ul></li></ul></li><li>Set 无序集合</li><li>Map 键值对<ul><li>HashMap: 数组+（链表 or 红黑树）<ul><li>keySet():String：获取map.key的set集合</li><li>entrySet():Set<Map>：获取map关系的set集合</li></ul></li></ul></li></ul><h3 id="util"><a href="#util" class="headerlink" title="util"></a>util</h3><ul><li>StringUtil common.lang<a href="https://www.jianshu.com/p/1886903ed14c">https://www.jianshu.com/p/1886903ed14c</a></li><li>BigDecimal 浮点数精确计算<ul><li>setScale(scale, BigDecimal.ROUND_HALF_UP)：四舍五入，scale&#x3D;小数后几位？</li><li>add&#x2F;subtract 加减法</li><li>mutiply() 乘法</li><li>divide()除法</li></ul></li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>多个catch：先小后大，按顺序匹配，当某一个catch匹配，跳过之后的catch，进入后续步骤。<br>任何执行try 或者catch中的return语句之前，都会先执行finally语句，如果finally存在的话。如果finally中有return语句，那么程序就return了，所以finally中的return是一定会被return的，编译器把finally中的return实现为一个warning。<br><strong>如果都有return 优先级为 final &gt; try &#x3D; catch &gt; return</strong></p><h2 id="反射，注解"><a href="#反射，注解" class="headerlink" title="反射，注解"></a>反射，注解</h2><ul><li>反射：实例化对象，通过Class.forName()获取对象</li><li>注解：@Target注解目标，@Retention注解生存周期，@Documented注解文档</li><li>加密算法：AES(对称加密)，RES(非对称加密，公钥加密，私钥解密)<br>动态加载类，jvm中需要另一个类的方法实现时，动态加入相应类</li></ul><h4 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h4><p>规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法,常与@FuncitonalInterface注解一同使用<a href="https://www.cnblogs.com/haixiang/p/11029639.html">原文链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NoReturnMultiParam</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">NoReturnNoParam</span> <span class="variable">noReturnNoParam</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;NoReturnNoParam&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        noReturnNoParam.method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="native方法"><a href="#native方法" class="headerlink" title="native方法"></a>native方法</h3><p>非Java实现的java方法。以其他语言实现的Java方法即为native方法。</p><h2 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h2><ul><li>堆：对象，数组</li><li>方法区（永久代）：类信息，常量，静态变量</li><li>程序计数器：当前线程执行 的字节码行号指示器</li><li>虚拟机栈：多个栈帧（局部变量表，操作数栈，动态链接表，方法出口）：java方法的执行即为栈帧的入栈，出栈</li><li>本地方法栈：类似虚拟机栈，对native方法执行出入栈操作</li></ul><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><ul><li>识别<ul><li>可达性分析算法：判断对象的引用链是否可达</li><li>引用计数算法：判断对象的引用数量，数量为零回收</li></ul></li><li>回收<ul><li>标记清除算法：该算法首先从根集合进行扫描，对存活的对象对象标记，标记完毕后，再扫描整个空间中未被标记的对象并进行回收</li><li>复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</li><li>标记整理算法：标记过程类似<strong>标记清除算法</strong>，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存，类似于磁盘整理的过程，该垃圾回收算法适用于对象存活率高的场景（老年代）</li><li>分段收集算法：不同的对象的生命周期(存活情况)是不一样的，而不同生命周期的对象位于堆中不同的区域，因此对堆内存不同区域采用不同的策略进行回收可以提高 JVM 的执行效率。<strong>新生代（标记复制），老年代（标记整理，清除）</strong></li></ul></li><li>内存<ul><li>新生代的目标就是尽可能快速的收集掉那些生命周期短的对象，一般情况下，所有新生成的对象首先都是放在新生代的</li><li>老年代存放的都是一些生命周期较长的对象，就像上面所叙述的那样，在新生代中经历了N次垃圾回收后仍然存活的对象就会被放到老年代中。</li><li>永久代主要用于存放静态文件，如Java类、方法等。</li></ul></li><li>回收器<ul><li>Serial收集器（复制算法): 新生代单线程收集器，标记和清理都是单线程，优点是简单高效；</li><li>Serial Old收集器 (标记-整理算法): 老年代单线程收集器，Serial收集器的老年代版本；</li><li>ParNew收集器 (复制算法): 新生代收并行集器，实际上是Serial收集器的多线程版本，在多核CPU环境下有着比Serial更好的表现；</li><li>Parallel Scavenge收集器 (复制算法): 新生代并行收集器，追求高吞吐量，高效利用 CPU。吞吐量 &#x3D; 用户线程时间&#x2F;(用户线程时间+GC线程时间)，高吞吐量可以高效率的利用CPU时间，尽快完成程序的运算任务，适合后台应用等对交互相应要求不高的场景；</li><li>Parallel Old收集器 (标记-整理算法)： 老年代并行收集器，吞吐量优先，Parallel Scavenge收集器的老年代版本；</li><li>CMS(Concurrent Mark Sweep)收集器（标记-清除算法）： 老年代并行收集器，以获取最短回收停顿时间为目标的收集器，具有高并发、低停顿的特点，追求最短GC回收停顿时间。</li><li>G1(Garbage First)收集器 (标记-整理算法)： Java堆并行收集器，G1收集器是JDK1.7提供的一个新收集器，G1收集器基于“标记-整理”算法实现，也就是说不会产生内存碎片。此外，G1收集器不同于之前的收集器的一个重要特点是：G1回收的范围是整个Java堆(包括新生代，老年代)，而前六种收集器回收的范围仅限于新生代或老年代。</li><li><a href="https://blog.csdn.net/justloveyou_/article/details/71216049">原文链接</a></li></ul></li></ul><h3 id="类加载（加载，链接【验证，准备，解析】，初始化，使用，卸载）"><a href="#类加载（加载，链接【验证，准备，解析】，初始化，使用，卸载）" class="headerlink" title="类加载（加载，链接【验证，准备，解析】，初始化，使用，卸载）"></a>类加载（加载，链接【验证，准备，解析】，初始化，使用，卸载）</h3><ul><li>类加载器：启动类lib，扩展类jre&#x2F;lib&#x2F;ext，应用程序类classpath，自定义类</li><li>双亲委派：当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父<br>类去完成。只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的<br>Class），子类加载器才会尝试自己去加载。【使用不同的类加载<br>器最终得到的都是同样一个 Object 对象】</li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><pre><code>[原文链接](https://blog.csdn.net/tanmomo/article/details/99671622)</code></pre><ol><li>创建线程有哪几种方式？<ul><li>继承Thread类（真正意义上的线程类），是Runnable接口的实现。</li><li>实现Runnable接口，并重写里面的run方法。</li><li>使用Executor框架创建线程池。Executor框架是juc里提供的线程池的实现。</li></ul></li><li>synchronized 和 volatile 的区别是什么？<ul><li>volatile 是变量修饰符；synchronized 是修饰类、方法、代码段。</li><li>volatile 仅能实现变量的修改可见性，不能保证原子性；而 synchronized 则可以保证变量的修改可见性和原子性。</li><li>volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。</li></ul></li><li>线程共享：堆，方法区（元数据）; 线程私有：程序计数器，虚拟机栈，本地方法栈</li><li>状态： 新建(New)、就绪（Runnable）start()、运行（Running）run()、阻塞(Blocked)和死亡(Dead)</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h4 id="Array-ArrayList"><a href="#Array-ArrayList" class="headerlink" title="Array ,ArrayList"></a>Array ,ArrayList</h4><p>Array和ArrayList的不同点：<br>Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。<br>Array大小是固定的，ArrayList的大小是动态变化的。<br>ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。<br>对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢</p><h4 id="hashMap原理"><a href="#hashMap原理" class="headerlink" title="hashMap原理"></a>hashMap原理</h4><ol start="2"><li>哈希冲突</li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ol><li><strong>红黑树</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 以下是力扣刷题总结内容 */</span></span><br><span class="line"><span class="comment">/** 双指针</span></span><br><span class="line"><span class="comment">*快慢指针</span></span><br><span class="line"><span class="comment">*头尾指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/** 二分法 —— 按条件快速查找 */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> increase.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (increase[mid] &lt; target) &#123;<span class="comment">//不符合条件</span></span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">right = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;<span class="comment">// 符合条件元素下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 分治法 —— 将复杂问题分为简单问题求解，将结果合并 */</span></span><br><span class="line"><span class="comment">/** 动态规划 —— 最少，最短 */</span> </span><br><span class="line"><span class="comment">/** DFS —— 递归 */</span> </span><br><span class="line"><span class="comment">// 广度优先遍历</span></span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">queue.offer(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;<span class="comment">// 获取当前队列中元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">List&lt;Integer&gt; list = edges.get(index);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> nextIndex : list) &#123;<span class="comment">// 添加下一层遍历得到的元素</span></span><br><span class="line">queue.offer(nextIndex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度优先遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">List&lt;Integer&gt; list = edges.get(index);<span class="comment">//获取当前元素对应的下层元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> nextIndex : list) &#123;<span class="comment">// 对每个下层元素递归获取内容</span></span><br><span class="line">            dfs(nextIndex);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 摩尔投票法</span></span><br><span class="line"><span class="comment">* 候选人(cand_num)初始化为nums[0]，票数count初始化为1。</span></span><br><span class="line"><span class="comment">* 当遇到与cand_num相同的数，则票数count = count + 1，否则票数count = count - 1。</span></span><br><span class="line"><span class="comment">* 当票数count为0时，更换候选人，并将票数count重置为1。</span></span><br><span class="line"><span class="comment">* 遍历完数组后，cand_num即为最终答案。*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cand_num</span> <span class="operator">=</span> nums[<span class="number">0</span>], count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cand_num == nums[i])</span><br><span class="line">                ++count;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (--count == <span class="number">0</span>) &#123;</span><br><span class="line">                cand_num = nums[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cand_num;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/** 树 */</span></span><br><span class="line"><span class="comment">/** 中序遍历 */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = stack.pop();</span><br><span class="line">                list.add(cur.val);</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/** 前缀树</span></span><br><span class="line"><span class="comment">* 根节点不包含字符，除根节点外每一个节点都只包含一个字符。</span></span><br><span class="line"><span class="comment">* 从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</span></span><br><span class="line"><span class="comment">* 每个节点的所有子节点包含的字符都不相同。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Trie[] children;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">isEnd = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line"><span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (node.children[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">node.children[index] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">&#125;</span><br><span class="line">node = node.children[index];</span><br><span class="line">&#125;</span><br><span class="line">node.isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Trie[] getChildren() &#123;</span><br><span class="line"><span class="keyword">return</span> children;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnd</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> isEnd;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**以下是程序员小灰学习资料自我总结内容*/</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;    <span class="comment">//链表</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="type">int</span> x)&#123; <span class="built_in">this</span>.val = x;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grammer</span>&#123;</span><br><span class="line">    <span class="comment">//冒泡排序 n*n</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n-i-<span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入排序 n*n</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="comment">//要插入元素及下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[i];    </span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[index])&#123;</span><br><span class="line">                arr[index+<span class="number">1</span>] = arr[index];    <span class="comment">//原来数据后移</span></span><br><span class="line">                index--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[index+<span class="number">1</span>] = insertVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//希尔排序 分段插入排序 略优于n*n，不足nlogn</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dk</span> <span class="operator">=</span> arr.length/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(dk &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            shellInsert(arr, dk);</span><br><span class="line">            dk = dk/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shellInsert</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> dk)</span>&#123;</span><br><span class="line">        <span class="comment">//类似插入，将1改为dk</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dk; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; a[i-dk])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a[i];</span><br><span class="line">                a[i] = a[i-dk];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-dk; j &gt;= <span class="number">0</span> &amp;&amp; x &lt; a[j]; j = j -dk)&#123;</span><br><span class="line">                    a[j+dk] = a[j];</span><br><span class="line">                &#125;</span><br><span class="line">                a[j+dk] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快速排序 递归 nlogn</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> low, end = high, key = arr[low];</span><br><span class="line">        <span class="keyword">while</span>(end &gt; start)&#123;</span><br><span class="line">            <span class="keyword">while</span>(end &gt; start &amp;&amp; arr[end] &gt;= key)    <span class="comment">//从后往前找比key小的值</span></span><br><span class="line">                end--;</span><br><span class="line">            <span class="keyword">if</span>(arr[end] &lt;= key)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[end];</span><br><span class="line">                arr[end] = arr[start];</span><br><span class="line">                arr[start] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(end &gt; start &amp;&amp; arr[start] &lt;= key)    <span class="comment">//从前往后找比key大的值</span></span><br><span class="line">                start++;</span><br><span class="line">            <span class="keyword">if</span>(arr[start] &gt;= key)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">                arr[start] = a[end];</span><br><span class="line">                arr[end] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右两侧数据递归排序</span></span><br><span class="line">        <span class="keyword">if</span>(start &gt; low)    quickSort(arr, low, start-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(end &lt; high)    quickSort(arr, end+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//归并排序 nlogn jdk底层排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">mergerSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;    <span class="comment">//初始值 0，length-1 </span></span><br><span class="line">        <span class="keyword">if</span>(left &gt;= right)    <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">center</span><span class="params">(left+right)</span>/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//左右两侧递归排序</span></span><br><span class="line">        sort(arr,left, center);</span><br><span class="line">        sort(arrm center+<span class="number">1</span>, right);</span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        <span class="type">int</span>[] tmpArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> center+<span class="number">1</span>, third = left, tmp = left;<span class="comment">//右数组第一元素索引,临时数组索引，左数组第一元素索引</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= center &amp;&amp; mid &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[left] &lt;= arr[mid])&#123;</span><br><span class="line">                tmpArr[third++] = arr[left++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tmpArr[third++] = arr[mid++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剩余合并</span></span><br><span class="line">        <span class="keyword">while</span>(mid &lt;= right)&#123;</span><br><span class="line">            tmpArr[third++] = arr[mid++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= center)&#123;</span><br><span class="line">            tmpArr[third++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//原 left-right 范围的内容被复制回原数组</span></span><br><span class="line">        <span class="keyword">while</span>(tmp &lt;= right)&#123;</span><br><span class="line">            arr[tmp] = tmpArr[tmp++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//非递归前序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrderTraveralWithStack</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(treeNode != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//访问左侧子节点，并入栈</span></span><br><span class="line">            <span class="keyword">while</span>(treeNode != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(treeNode.val);</span><br><span class="line">                stack.push(treeNode);</span><br><span class="line">                treeNode = treeNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果没有左侧子节点，弹出栈顶节点，访问右侧子节点</span></span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                treeNode = stack.pop();</span><br><span class="line">                treeNode = treeNode.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//层序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            System.out.println(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//上浮</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upAdjust</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">childIndex</span> <span class="operator">=</span> array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">parentIndex</span> <span class="operator">=</span> (childIndex-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[childIndex];</span><br><span class="line">        <span class="keyword">while</span>(childIndex &gt; <span class="number">0</span> &amp;&amp; temp &lt; array[parentIndex])&#123;</span><br><span class="line">            array[childIndex] = array[parentIndex];</span><br><span class="line">            childIndex = parentIndex;</span><br><span class="line">            parentIndex = (parentIndex-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[childIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下沉,要下沉的父节点，堆的有效大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downAdjust</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> parentIndex, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[parentIndex];</span><br><span class="line">        <span class="type">int</span> <span class="variable">childIndex</span> <span class="operator">=</span> <span class="number">2</span>*parentIndex+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(childIndex &lt; length)&#123;</span><br><span class="line">            <span class="comment">//如果有右孩子，且右孩子小于左孩子，则定位到右孩子</span></span><br><span class="line">            <span class="keyword">if</span>(childIndex+<span class="number">1</span> &lt; length &amp;&amp; array[childIndex+<span class="number">1</span>] &lt;array[childIndex])&#123;</span><br><span class="line">                childIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//如果父节点小于任何子节点 跳出循环</span></span><br><span class="line">            <span class="keyword">if</span>(temp &lt;= array[childIndex])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            array[parentIndex] = array[childIndex];</span><br><span class="line">            parentIndex = childIndex;</span><br><span class="line">            childIndex = <span class="number">2</span>*childIndex+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构建二叉堆</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildHeap</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="comment">//从最后一个非叶子节点开始下沉</span></span><br><span class="line">        <span class="keyword">for</span>(inti = (array.length-<span class="number">2</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            downAdjust(array, i, array.length);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//堆排序 nlogn 255</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downAdjusts</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> parentIndex, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[parentIndex];</span><br><span class="line">        <span class="type">int</span> <span class="variable">childIndex</span> <span class="operator">=</span> <span class="number">2</span>* parentIndex+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(childIndex &lt; length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(childIndex+<span class="number">1</span> &lt; length &amp;&amp; array[childIndex+<span class="number">1</span>] &lt; array[childIndex])&#123;</span><br><span class="line">                childIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt;= array[childIndex])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            array[parentIndex] = array[childIndex];</span><br><span class="line">            parentIndex = childIndex;</span><br><span class="line">            childIndex = <span class="number">2</span>*childIndex+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[parentIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (array.length-<span class="number">2</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            downAdjusts(array, i, array.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环删除堆顶，调整产生新的堆顶</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> array.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="comment">//首尾元素交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">            array[i] = array[<span class="number">0</span>];</span><br><span class="line">            array[<span class="number">0</span>] = temp;</span><br><span class="line">            downAdjusts(array, <span class="number">0</span>, i);    <span class="comment">//下沉调整最大堆</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计数排序 数据在小范围内，统计个数排序 n</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countSort(<span class="type">int</span>[] array)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>], min = array[<span class="number">0</span>];                <span class="comment">//获取最大值，最小值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt; max)&#123;</span><br><span class="line">                max = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt; min)&#123;</span><br><span class="line">                min = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;                            </span><br><span class="line">        <span class="type">int</span>[] countArray = <span class="keyword">new</span> <span class="title class_">int</span>[max-min+<span class="number">1</span>];    <span class="comment">//计数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            countArray[array[i]-min]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; countArray.length; i++)&#123;    <span class="comment">//统计变形</span></span><br><span class="line">            countArray[i] += countArray[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] sortedArray = <span class="keyword">new</span> <span class="title class_">int</span>[array.length];<span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> array.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            sortedArray[countArray[array[i]-min]-<span class="number">1</span>] = array[i];</span><br><span class="line">            countArray[array[i]-min]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sortedArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//桶排序 浮点数的计数排序 n</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] bucketSort(<span class="type">double</span>[] array)&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>], min = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt; max)&#123;</span><br><span class="line">                max = array[i];</span><br><span class="line">            &#125;<span class="keyword">if</span>(array[i] &lt; min)&#123;</span><br><span class="line">                min = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;LinkedList&lt;Double&gt;&gt; bucketList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;LinkedList&lt;Double&gt;&gt;(array.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            bucketList.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Double&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)((array[i] - min) * (array.length-<span class="number">1</span>)/(max-min));</span><br><span class="line">            bucketList.get(num).add(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketList.size(); i++)&#123;</span><br><span class="line">            Collections.sort(bucketList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span>[] sortedArray = <span class="keyword">new</span> <span class="title class_">double</span>[array.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(LinkedList&lt;Double&gt; list: bucketList)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">double</span> element : list)&#123;</span><br><span class="line">                sortedArray[index++] = element;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sortedArray;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//二分查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">biSearch</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(array[mid] == a)&#123;    <span class="comment">//找到元素</span></span><br><span class="line">                <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[mid] &lt; a)&#123; <span class="comment">//向右查找</span></span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;                    <span class="comment">//向左查找</span></span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;                    <span class="comment">//未找到元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断链表有环</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCycle</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head, slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)&#123;    </span><br><span class="line">            <span class="comment">//首次相遇后，计算步数，当再次相遇时获得环长</span></span><br><span class="line">            <span class="comment">//首次相遇后，slow指向头结点，再次相遇节点为入环节点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最小栈实现</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MinStack</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="keyword">private</span> Stack&lt;Integer&gt; minStack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> element)</span>&#123;</span><br><span class="line">            stack.push(element);</span><br><span class="line">            <span class="keyword">if</span>(minStack.isEmpty() || element &lt;= minStack.peek())&#123;</span><br><span class="line">                minStack.push(element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.peek().equals(minStack.peek()))&#123;</span><br><span class="line">                minStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> <span class="keyword">throw</span> Exception&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;stack is empty&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> minStack.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最大公约数 辗转相除法，欧几里得</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGreatestCommonDivisor</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a == b)    <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">if</span>((a&amp;<span class="number">1</span>) == <span class="number">0</span> &amp;&amp; (b&amp;<span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> getGreatestCommonDivisor(a&gt;&gt;<span class="number">1</span>, b&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((a&amp;<span class="number">1</span>) == <span class="number">0</span> &amp;&amp; (b&amp;<span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> getGreatestCommonDivisor(a&gt;&gt;<span class="number">1</span>, b);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((a&amp;<span class="number">1</span>) != <span class="number">0</span> &amp;&amp; (b&amp;<span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> getGreatestCommonDivisor(a, b&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">big</span> <span class="operator">=</span> a&gt;b ? a:b;</span><br><span class="line">            <span class="type">int</span> <span class="variable">small</span> <span class="operator">=</span> a&lt;b ? a:b;</span><br><span class="line">            <span class="keyword">return</span> getGreatestCommonDivisor(big-small, small);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判定数为二次幂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowOf2</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (num &amp; num-<span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无序数组排序后的最大相邻差    桶排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Bucket</span>&#123;</span><br><span class="line">        Integer max;</span><br><span class="line">        Integer min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">gerMaxSort</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt; max)&#123;</span><br><span class="line">                max =array[i];</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt; min)</span><br><span class="line">                min = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max-min == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Bucket[] buckets = <span class="keyword">new</span> <span class="title class_">Bucket</span>[array.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            buckets[i] = <span class="keyword">new</span> <span class="title class_">Bucket</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ((array[i]-min)*(array.length-<span class="number">1</span>)/(max=min));</span><br><span class="line">            <span class="keyword">if</span>(buckets[index].min == <span class="literal">null</span> || buckets[index].min &gt; array[i])</span><br><span class="line">                buckets[index],min = array[i];</span><br><span class="line">            <span class="keyword">if</span>(buckets[index].max == <span class="literal">null</span> || buckets[index].max &lt; array[i])</span><br><span class="line">                buckets[index].max = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftMax= buckets[<span class="number">0</span>].max, maxDistance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; buckets.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buckets[i].min == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(buckets[i].min-leftMax &gt; maxDistance)</span><br><span class="line">                maxDistance = buckets[i].min-leftMax;</span><br><span class="line">            leftMax = buckets[i].max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxDistance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//队列实现栈</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackA = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackB = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(<span class="type">int</span> element)</span>&#123;</span><br><span class="line">        stackA.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">deQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stackB.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stackA.isEmpty())&#123;</span><br><span class="line">                stackB.push(stackA.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stackB.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得全排列下一个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findNearestNumber(<span class="type">int</span>[] number)&#123;</span><br><span class="line">        <span class="comment">//从后向前查看逆序区域，获得区域前一位，数字置换边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> number.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i] &gt; number[i-<span class="number">1</span>])&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//把逆序区域前一位和逆序中刚大于它的数字交换</span></span><br><span class="line">        <span class="type">int</span>[] numberCopy = Arrays.copyOf(numberm number.length);</span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> numberCopy[index-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> numberCopy.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head &lt; numberCopy[i])&#123;</span><br><span class="line">                numberCopy[index-<span class="number">1</span>] = numb[i];</span><br><span class="line">                numberCopy[i] = head;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把原来的逆序区域转为顺序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index, j = numberCopy.length-<span class="number">1</span>; i &lt; j; i++, j--)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> numberCopy[i];</span><br><span class="line">            numberCopy[i] = number[j];</span><br><span class="line">            numberCopy[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numberCopy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删去k个数字后的最小值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDigit</span><span class="params">(String num, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newLength</span> <span class="operator">=</span> num.length()-k;</span><br><span class="line">        <span class="comment">//创建一个栈，接受所有数据</span></span><br><span class="line">        <span class="type">char</span>[] stack = <span class="keyword">new</span> <span class="title class_">char</span>[num.length()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; num.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> num.charAt(i);</span><br><span class="line">            <span class="comment">//当栈顶数字大于遍历到的当前数字时，栈顶数字出栈</span></span><br><span class="line">            <span class="keyword">while</span>(top &gt; <span class="number">0</span> &amp;&amp; stack[top-<span class="number">1</span>] &gt; c &amp;&amp; k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                top --;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            stack[top++] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到栈中第一个非零数字的位置，构建新的整数字符串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(offset &lt; newLength &amp;&amp; stack[offset] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> offset == newLength ? <span class="string">&quot;0&quot;</span> : <span class="keyword">new</span> <span class="title class_">String</span>(stack, offset, newLength-offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//大数相加</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">bigBumberSum</span><span class="params">(String a, String b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> a.length()&gt;b.length()&gt; a.length(): b.length();</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[maxLength+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">            <span class="keyword">if</span>(a.length()-<span class="number">1</span>-i &gt;= <span class="number">0</span>)</span><br><span class="line">                temp += a.charAt(a.length()-<span class="number">1</span>-i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(b.length()-<span class="number">1</span>-i &gt;= <span class="number">0</span>)</span><br><span class="line">                temp += b.charAt(b.length()-<span class="number">1</span>-i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">                temp = temp-<span class="number">10</span>;</span><br><span class="line">                array[i+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            array[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">findFirst</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> array.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!findFirst)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                findFirst = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.append(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求解金矿 背包问题 </span></span><br><span class="line">    <span class="comment">//工人数量，金矿开采需人工数，金矿储量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBestGoldMining</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span>[] p, <span class="type">int</span>[] g)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>[g.length+<span class="number">1</span>][w+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= g.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= w; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &lt; p[i-<span class="number">1</span>])</span><br><span class="line">                    result[i][j] = result[i-<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    result[i][j] = Math.max(result[i-<span class="number">1</span>][j], result[i-<span class="number">1</span>][j-p[i-<span class="number">1</span>]]+g[i-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result[g.length][w];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全排列中缺失的数据 分治</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findLostNum(<span class="type">int</span>[] array)&#123;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">xor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            xor ^= array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(xor == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">separator</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">0</span> == (xor &amp; separator))&#123;</span><br><span class="line">            separator &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> == (array[i] &amp; separator))</span><br><span class="line">                result[<span class="number">0</span>] ^= array[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result[<span class="number">1</span>] ^= array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//LRU缓存 最近最少使用</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        Node(String key, String  value)&#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;<span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Node pre;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="keyword">public</span> String key;</span><br><span class="line">        <span class="keyword">public</span> String value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Node head, end;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> limit;<span class="comment">//缓存存储上限</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Node&gt; hashMap;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> limit)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.limit = limit;</span><br><span class="line">        hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> hashMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        refreshNode(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, String value)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> hashMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashMap.size() &gt;= limit)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">oldkey</span> <span class="operator">=</span>removeNode(head);</span><br><span class="line">                hashMap.remove(oldkey);</span><br><span class="line">            &#125;</span><br><span class="line">            node = <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">            addNode(node);</span><br><span class="line">            hashMap.put(key, node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            refreshNode(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> hashMap.get(key);</span><br><span class="line">        removeNode(node);</span><br><span class="line">        hashMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshNode</span><span class="params">(Node node)</span>&#123;    <span class="comment">//更新使用状态</span></span><br><span class="line">        <span class="keyword">if</span>(node == end)    <span class="keyword">return</span>;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addNode(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">removeNode</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == node &amp;&amp; end == node)&#123;    <span class="comment">//只有一个节点</span></span><br><span class="line">            head = <span class="literal">null</span>; end = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node == end)&#123;</span><br><span class="line">            end = end.pre;</span><br><span class="line">            end.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node == head)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            head.pre = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.pre,next = node.next;</span><br><span class="line">            node.next.pre = node.pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node node)</span>&#123;    <span class="comment">//添加数据到链表尾部</span></span><br><span class="line">        <span class="keyword">if</span>(end != <span class="literal">null</span>)&#123;</span><br><span class="line">            end.next = node;</span><br><span class="line">            node.pre = en;</span><br><span class="line">            node.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        end = node;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//A星寻路算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span>[][] MAZE&#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Grid</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> x, y, f, g, h;</span><br><span class="line">        <span class="keyword">public</span> Grid parent;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Grid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x; <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initGrid</span><span class="params">(Grid parent, Grid end)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.g = parent.g+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.g = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.h = Math.abs(<span class="built_in">this</span>.x-end.x)+Math.abs(<span class="built_in">this</span>.y-end.y);</span><br><span class="line">            <span class="built_in">this</span>.f = <span class="built_in">this</span>.g+<span class="built_in">this</span>.h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Grid <span class="title function_">aStartSearch</span><span class="params">(Grid start, Grid end)</span>&#123;</span><br><span class="line">        ArrayList&lt;Grid&gt; openList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();    <span class="comment">//可前进位置</span></span><br><span class="line">        ArrayList&lt;Grid&gt; closeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); <span class="comment">//已走过位置</span></span><br><span class="line">        openList.add(start);</span><br><span class="line">        <span class="keyword">while</span>(openList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">Grid</span> <span class="variable">currentGrid</span> <span class="operator">=</span> findMinGrid(openList);</span><br><span class="line">            openList.remove(currentGrid);</span><br><span class="line">            closeList.add(currentGrid);</span><br><span class="line">            List&lt;Grid&gt; neighbors = findNeighbors(currentGrid, openList,closeList);</span><br><span class="line">            <span class="keyword">for</span>(Grid grid : neighbors)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!openList.contains(grid))&#123;</span><br><span class="line">                    grid.initGrid(currentGrid, end);</span><br><span class="line">                    openList.add(grid);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(grid.x == end.x &amp;&amp; grid.y = end.y)&#123;    <span class="comment">//如果终点在openlist 直接返回终点</span></span><br><span class="line">                    <span class="keyword">return</span> grid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Grid <span class="title function_">findMinGrid</span><span class="params">(ArrayList&lt;Grid&gt; openList)</span>&#123;</span><br><span class="line">        <span class="type">Grid</span> <span class="variable">tempGrid</span> <span class="operator">=</span> openList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(Grid grid: openList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid.f &lt; tempGrid.f)</span><br><span class="line">                tempGrid = grid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tempGrid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Grid&gt; <span class="title function_">findNeighbors</span><span class="params">(Grid grid, List&lt;Grid&gt; openList, List&lt;Grid&gt; closeList)</span>&#123;</span><br><span class="line">        ArrayList&lt;Grid&gt; gridlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">if</span>(isValidGrid(grid.x, grid.y-<span class="number">1</span>, openList, closeList))</span><br><span class="line">            gridlist.add(<span class="keyword">new</span> <span class="title class_">Grid</span>(grid.x, grid.y-<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(isValidGrid(grid.x, grid.y+<span class="number">1</span>, openList, closeList))</span><br><span class="line">            gridlist.add(<span class="keyword">new</span> <span class="title class_">Grid</span>(grid.x, grid.y+<span class="number">1</span>));</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(isValidGrid(grid.x-<span class="number">1</span>, grid.y, openList, closeList))</span><br><span class="line">            gridlist.add(<span class="keyword">new</span> <span class="title class_">Grid</span>(grid.x-<span class="number">1</span>, grid.y));</span><br><span class="line">        <span class="keyword">if</span>(isValidGrid(grid.x+<span class="number">1</span>, grid.y, openList, closeList))</span><br><span class="line">            gridlist.add(<span class="keyword">new</span> <span class="title class_">Grid</span>(grid.x+<span class="number">1</span>, grid.y));</span><br><span class="line">        <span class="keyword">return</span> gridlist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidGrid</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y, List&lt;Grid&gt; openList, List&lt;Grid&gt; closeList)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= MAZE.length || y &lt; <span class="number">0</span> || y &gt;= MAZE[<span class="number">0</span>].length)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(MAZE[x][y] == <span class="number">1</span>)    <span class="comment">//有障碍</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(containsGrid(openList, x, y) || containsGrid(closeList, x, y))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">containsGrid</span><span class="params">(List&lt;Grid&gt; grids, <span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Grid n: grids)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n.x == x &amp;&amp; n.y == y)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//红包算法</span></span><br><span class="line">    <span class="comment">//二倍均值法 红包=0.01——剩余金额/剩余人数*2-0.01</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;integer&gt; <span class="title function_">divideRedPackage</span><span class="params">(Integer totalAmount, Integer totalPeopleNum)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; amountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">restAmount</span> <span class="operator">=</span> totalAmount;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">restPeoPleNum</span> <span class="operator">=</span> totalPeopleNum;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; totalPeopleNum-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> random.nextInt(restAmount/restPeoPleNum*<span class="number">2</span>-<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">            restAmount -= amount;</span><br><span class="line">            restPeoPleNum--;</span><br><span class="line">            amountList.add(amount);</span><br><span class="line">        &#125;</span><br><span class="line">        amountList.add(restAmount);</span><br><span class="line">        <span class="keyword">return</span> amountList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手撕代码"><a href="#手撕代码" class="headerlink" title="手撕代码"></a>手撕代码</h2><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">ReverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//做循环，如果当前节点不为空的话，始终执行此循环，此循环的目的就是让当前节点从指向next到指向pre</span></span><br><span class="line">        <span class="comment">//如此就可以做到反转链表的效果</span></span><br><span class="line">        <span class="comment">//先用next保存head的下一个节点的信息，保证单链表不会因为失去head节点的原next节点而就此断裂</span></span><br><span class="line">        q = head.next;</span><br><span class="line">        <span class="comment">//保存完next，就可以让head从指向next变成指向pre了，代码如下</span></span><br><span class="line">        head.next = p;</span><br><span class="line">        <span class="comment">//head指向pre后，就继续依次反转下一个节点</span></span><br><span class="line">        <span class="comment">//让pre，head，next依次向后移动一个节点，继续下一次的指针反转</span></span><br><span class="line">        p = head;</span><br><span class="line">        head = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="三十个人围成一圈，数到5退出，求最后一个退出的"><a href="#三十个人围成一圈，数到5退出，求最后一个退出的" class="headerlink" title="三十个人围成一圈，数到5退出，求最后一个退出的"></a>三十个人围成一圈，数到5退出，求最后一个退出的</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    </span><br></pre></td></tr></table></figure></code></pre><h3 id="矩阵蛇形遍历"><a href="#矩阵蛇形遍历" class="headerlink" title="矩阵蛇形遍历"></a>矩阵蛇形遍历</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">way</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[][] arry = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;    <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            arry[i][j] = (i-<span class="number">1</span>)*n+j+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j  = <span class="number">0</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    sb.append(arry[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">&quot; &quot;</span>);    <span class="comment">//第一个元素</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isDown</span> <span class="operator">=</span> <span class="literal">false</span>;    <span class="comment">//判断是自上而下还是自下而上，默认自上而下</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span> == n &amp;&amp; j+<span class="number">1</span> == n)&#123;    <span class="comment">//结束跳出</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i-<span class="number">1</span> &lt; <span class="number">0</span>|| i+<span class="number">1</span> == n)&#123;        <span class="comment">//右</span></span><br><span class="line">            sb.append(arry[i][++j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            isDown = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j-<span class="number">1</span> &lt; <span class="number">0</span> || j+<span class="number">1</span> == n)&#123;        <span class="comment">//下</span></span><br><span class="line">            sb.append(arry[++i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            isDown = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(isDown)&#123;</span><br><span class="line">                sb.append(arry[++i][++j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(arry[--i][--j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> language </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/07/06/linux/"/>
      <url>/2022/07/06/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h3 id="分页，分段区别"><a href="#分页，分段区别" class="headerlink" title="分页，分段区别"></a>分页，分段区别</h3><pre><code>分页和分段有许多相似之处,比如两者都不要求作业连续存放.但在概念上两者完全不同,主要表现在以下几个方面:[原文链接](https://blog.csdn.net/wangrunmin/article/details/7967293?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161931624016780357247739%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161931624016780357247739&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-7967293.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E6%AE%B5)(1)页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要.(2)页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分.(3)分页的作业地址空间是一维的.分段的地址空间是二维的.</code></pre><h3 id="线程，进程"><a href="#线程，进程" class="headerlink" title="线程，进程"></a>线程，进程</h3><pre><code>进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程一般由程序，数据集合和进程控制块三部分组成线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)[原文链接](https://www.cnblogs.com/qianqiannian/p/7010909.html)</code></pre><h3 id="死锁，银行家算法"><a href="#死锁，银行家算法" class="headerlink" title="死锁，银行家算法"></a>死锁，银行家算法</h3><pre><code>- 产生条件：（1） **互斥条件**：一个资源每次只能被一个进程使用。（2） **占有且等待**：一个进程因请求资源而阻塞时，对已获得的资源保持不放。（3）**不可强行占有**:进程已获得的资源，在末使用完之前，不能强行剥夺。（4） **循环等待条件**:若干进程之间形成一种头尾相接的循环等待资源关系。- 处理死锁    - 死锁预防：通过设置某些限制条件，去破坏死锁的四个条件中的一个或几个条件，来预防发生死锁。但由于所施加的限制条件往往太严格，因而导致系统资源利用率和系统吞吐量降低。    - 死锁避免：允许前三个必要条件，但通过明智的选择，确保永远不会到达死锁点，因此死锁避免比死锁预防允许更多的并发。**银行家算法**    - 死锁检测：不须实现采取任何限制性措施，而是允许系统在运行过程发生死锁，但可通过系统设置的检测机构及时检测出死锁的发生，并精确地确定于死锁相关的进程和资源，然后采取适当的措施，从系统中将已发生的死锁清除掉。    - 死锁解除：与死锁检测相配套的一种措施。当检测到系统中已发生死锁，需将进程从死锁状态中解脱出来。常用方法：撤销或挂起一些进程，以便回收一些资源，再将这些资源分配给已处于阻塞状态的进程。死锁检测盒解除有可能使系统获得较好的资源利用率和吞吐量，但在实现上难度也最大。    [原文链接](https://blog.csdn.net/qq_42883292/article/details/106151240)</code></pre><h4 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h4><ul><li>系统启动：1. 内核引导2. 运行init3. 系统初始化4. 建立终端5. 用户登录系统</li><li>系统目录：<ul><li>&#x2F;bin：是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</li><li>&#x2F;boot：这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li>&#x2F;dev ：是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li><li>&#x2F;etc：是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li><li>&#x2F;home：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</li><li>&#x2F;lib：是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</li><li>&#x2F;lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li>&#x2F;media：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</li><li>&#x2F;mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</li><li>&#x2F;opt：opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li>&#x2F;proc：proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，</li><li>&#x2F;root：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>&#x2F;sbin：就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</li><li>&#x2F;selinux： 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</li><li>&#x2F;srv： 该目录存放一些服务启动之后需要提取的数据。</li><li>&#x2F;sys：这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</li><li>&#x2F;tmp：tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</li><li>&#x2F;usr： usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</li><li>&#x2F;usr&#x2F;bin：系统用户使用的应用程序。</li><li>&#x2F;usr&#x2F;sbin：超级用户使用的比较高级的管理程序和系统守护程序。</li><li>&#x2F;usr&#x2F;src：内核源代码默认的放置目录。</li><li>&#x2F;var：var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li>&#x2F;run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</li></ul></li></ul><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><h5 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h5><ul><li>chown：修改所属用户和组</li><li>chmod：修改用户权限</li><li>ll &#x2F; ls -l展示文件权限 【d r-x r-x r-x】<ul><li>第0位，文件类型【d：目录，-：文件，l：链接文件，b：装置文件中可供存储的接口设备（可随机存储装置），c：装置文件中串行端口设备（键盘等一次性读取装置）】</li><li>第1-3位,第4-6位,第7-9位分别为属主（文件所有者）权限，属组（所有者的同组用户）权限，其他用户权限</li><li>第 1、4、7 位表示读权限，如果用 r 字符表示，则有读权限，如果用 - 字符表示，则没有读权限；</li><li>第 2、5、8 位表示写权限，如果用 w 字符表示，则有写权限，如果用 - 字符表示没有写权限</li><li>第 3、6、9 位表示可执行权限，如果用 x 字符表示，则有执行权限，如果用 - 字符表示，则没有执行权限。</li></ul></li></ul><h5 id="文件目录：使用-man-命令-来查看各个命令的使用文档"><a href="#文件目录：使用-man-命令-来查看各个命令的使用文档" class="headerlink" title="文件目录：使用 man [命令] 来查看各个命令的使用文档"></a>文件目录：使用 man [命令] 来查看各个命令的使用文档</h5><ul><li>ls（英文全拼：list files）: 列出目录及文件名<ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul></li><li>cd [相对路径或绝对路径]（英文全拼：change directory）：切换目录</li><li>pwd [-P]（英文全拼：print work directory）：显示目前的目录<ul><li>-P ：显示出确实的路径，而非使用连结 (link) 路径。</li></ul></li><li>mkdir [-mp] 目录名称（英文全拼：make directory）：创建一个新的目录<ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p></p></li><li>rmdir [-p] 目录名称（英文全拼：remove directory）：删除一个空的目录<ul><li>-p ：连同上一级『空的』目录也一起删除</li></ul></li><li>cp（英文全拼：copy file）: 复制文件或目录<ul><li>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li><li>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li>-r：递归持续复制，用於目录的复制行为；(常用)</li><li>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li>-u：若 destination 比 source 旧才升级 destination ！</li></ul></li><li>rm [-fir] 文件或目录（英文全拼：remove）: 删除文件或目录<ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul></li><li>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称<ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul></li></ul><h5 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h5><ul><li>cat [-AbEnTv]  由第一行开始显示文件内容<ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul></li><li>tac  从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl [-bnw] 文件   显示的时候，顺道输出行号！<ul><li>-b ：指定行号指定的方式，主要有两种：<ul><li>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；</li><li>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li></ul></li><li>-n ：列出行号表示的方法，主要有三种：<ul><li>-n ln ：行号在荧幕的最左方显示；</li><li>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；</li><li>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li></ul></li><li>-w ：行号栏位的占用的位数。</li></ul></li><li>more 一页一页的显示文件内容。以下是指令运行时可进行操作<ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter         ：代表向下翻『一行』；</li><li>&#x2F;字串         ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f            ：立刻显示出档名以及目前显示的行数；</li><li>q             ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul></li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！<ul><li>空白键    ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup]  ：向上翻动一页；</li><li>&#x2F;字串     ：向下搜寻『字串』的功能；</li><li>?字串     ：向上搜寻『字串』的功能；</li><li>n         ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>N         ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>q         ：离开 less 这个程序；</li></ul></li><li>head [-n number] 文件  只看头几行<ul><li>-n ：后面接数字，代表显示几行的意思</li></ul></li><li>tail [-n number] 文件  只看尾巴几行<ul><li>-n ：后面接数字，代表显示几行的意思</li><li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li></ul></li></ul><h5 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h5><ul><li><p>useradd 选项 用户名：添加新的用户账号</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>userdel 选项 用户名：删除一个已有的用户账号</p><ul><li>-r 把用户的主目录一起删除。</li></ul></li><li><p>usermod 选项 用户名：修改用户账号，根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等</p></li><li><p>passwd 选项 用户名：指定和修改用户口令</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul></li><li><p>groupadd 选项 用户组：增加一个新的用户组</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul></li><li><p>groupdel 用户组：删除一个已有的用户组</p></li><li><p>groupmod 选项 用户组：修改用户组的属性</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul></li><li><p>newgrp 用户组：当前用户切换到用户组【用户存在于该用户组中】</p></li></ul><h6 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h6><ul><li>etc&#x2F;passwd：账户信息 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</li><li>etc&#x2F;group：用户组信息 组名:口令:组标识号:组内用户列表</li></ul><h5 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h5><ul><li>df [-ahikHTm] [目录或文件名]（英文全称：disk full）：列出文件系统的整体磁盘使用量<ul><li>-a ：列出所有的文件系统，包括系统特有的 &#x2F;proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M&#x3D;1000K 取代 M&#x3D;1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul></li><li>du [-ahskm] 文件或目录名称（英文全称：disk used）：检查磁盘空间使用量<ul><li>a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul></li><li>fdisk [-l] 装置名称：用于磁盘分区<ul><li>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li></ul></li><li>mkfs [-t 文件系统格式] 装置文件名 磁盘格式化<ul><li>-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</li></ul></li><li>fsck [-t 文件系统] [-ACay] 装置名称 磁盘检验，检查和维护不一致的文件系统<ul><li>-t : 给定档案系统的型式，若在 &#x2F;etc&#x2F;fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</li><li>-s : 依序一个一个地执行 fsck 的指令来检查</li><li>-A : 对&#x2F;etc&#x2F;fstab 中所有列出来的 分区（partition）做检查</li><li>-C : 显示完整的检查进度</li><li>-d : 打印出 e2fsck 的 debug 结果</li><li>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</li><li>-R : 同时有 -A 条件时，省略 &#x2F; 不检查</li><li>-V : 详细显示模式</li><li>-a : 如果检查有错则自动修复</li><li>-r : 如果检查有错则由使用者回答是否修复</li><li>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</li></ul></li><li>mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点 磁盘挂载</li><li>umount [-fn] 装置文件名或挂载点 磁盘卸载<ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 &#x2F;etc&#x2F;mtab 情况下卸除。</li></ul></li></ul><h5 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h5><ul><li>yum [options] [command] [package …]：options：可选，选项包括-h（帮助），-y（当安装过程提示选择全部为 “yes”），-q（不显示安装的过程）等等; command：要进行的操作; package：安装的包名。<ol><li>列出所有可更新的软件清单命令：yum check-update</li><li>更新所有软件命令：yum update</li><li>仅安装指定的软件命令：yum install <package_name></li><li>仅更新指定的软件命令：yum update <package_name></li><li>列出所有可安裝的软件清单命令：yum list</li><li>删除软件包命令：yum remove <package_name></li><li>查找软件包命令：yum search <keyword></li><li>清除缓存命令:<ul><li>yum clean packages: 清除缓存目录下的软件包</li><li>yum clean headers: 清除缓存目录下的 headers</li><li>yum clean oldheaders: 清除缓存目录下旧的 headers</li><li>yum clean, yum clean all (&#x3D; yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的 headers</li></ul></li></ol></li><li>apt [options] [command] [package …]：options：可选，选项包括 -h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等; command：要进行的操作; package：安装的包名。<ul><li>列出所有可更新的软件清单命令：sudo apt update</li><li>升级软件包：sudo apt upgrade</li><li>列出可更新的软件包及版本信息：apt list –upgradeable</li><li>升级软件包，升级前先删除需要更新软件包：sudo apt full-upgrade</li><li>安装指定的软件命令：sudo apt install <package_name></li><li>安装多个软件包：sudo apt install <package_1> <package_2> <package_3></li><li>更新指定的软件命令：sudo apt update <package_name></li><li>显示软件包具体信息,例如：版本号，安装大小，依赖关系等等：sudo apt show <package_name></li><li>删除软件包命令：sudo apt remove <package_name></li><li>清理不再使用的依赖和库文件: sudo apt autoremove</li><li>移除软件包及配置文件: sudo apt purge <package_name></li><li>查找软件包命令： sudo apt search <keyword></li><li>列出所有已安装的包：apt list –installed</li><li>列出所有已安装的包的版本信息：apt list –all-versions</li></ul></li></ul><h1 id="Linux-CenterOS-命令"><a href="#Linux-CenterOS-命令" class="headerlink" title="Linux(CenterOS) 命令"></a>Linux(CenterOS) 命令</h1><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><ul><li><p>开放80 firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent<br>　　– zone #作用域<br>　　　　– add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议<br>　　　　– permanent #永久生效，没有此参数重启后失效</p></li><li><p>关闭80 firewall-cmd –zone&#x3D;public –remove-port&#x3D;80&#x2F;tcp –permanent  </p></li><li><p>重启防火墙 ： firewall-cmd –reload</p></li><li><p>查询哪些端口开放 ：firewall-cmd –list-port</p></li><li><p>关闭防火墙 ：systemctl stop firewalld.service</p></li><li><p>禁止开机启动防火墙 ： systemctl disable firewalld.service</p></li><li><p>允许开机启动防火墙 ：systemctl enable firewalld.service</p></li><li><p>查看防火墙状态 ：firewall-cmd –state</p></li></ul><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>安装上传下载插件（rz,sz）<br>yum install lrzsz<br>解压文件<br>tar -zxvf 文件名</p><p>jdk:<br>yum -y list java*<br>yum install java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64 </p><p>mysql:[<a href="https://blog.csdn.net/wohiusdashi/article/details/89358071]">https://blog.csdn.net/wohiusdashi/article/details/89358071]</a><br>wget <a href="https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm">https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</a><br>rpm -ivh mysql57-community-release-el7-9.noarch.rpm<br>yum install mysql-server<br>systemctl start mysqld<br>grep ‘temporary password’ &#x2F;var&#x2F;log&#x2F;mysqld.log<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘@abcd123456’; </p>]]></content>
      
      
      
        <tags>
            
            <tag> basic </tag>
            
            <tag> system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>compute-network</title>
      <link href="/2022/07/06/network/"/>
      <url>/2022/07/06/network/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h3 id="三次握手，四次挥手"><a href="#三次握手，四次挥手" class="headerlink" title="三次握手，四次挥手"></a>三次握手，四次挥手</h3><ol><li>第一次握手：建立连接时，客户端发送syn包（syn&#x3D;x）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</li><li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack&#x3D;x+1），同时自己也发送一个SYN包（syn&#x3D;y），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li><li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack&#x3D;y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</li></ol><hr><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN&#x3D;1，其序列号为seq&#x3D;u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li>服务器收到连接释放报文，发出确认报文，ACK&#x3D;1，ack&#x3D;u+1，并且带上自己的序列号seq&#x3D;v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</li><li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN&#x3D;1，ack&#x3D;u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq&#x3D;w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</li><li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</li></ol><p><a href="https://blog.csdn.net/qq_38950316/article/details/81087809">原文链接</a></p><h3 id="OSI七层架构"><a href="#OSI七层架构" class="headerlink" title="OSI七层架构"></a>OSI七层架构</h3><table><thead><tr><th align="center">网络模型</th><th align="center">网络协议</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">应用层</td><td align="center">HTTP,FTP,SMTP</td><td align="center"></td></tr><tr><td align="center">表示层</td><td align="center">TelNet</td><td align="center"></td></tr><tr><td align="center">会话层</td><td align="center">DNS</td><td align="center"></td></tr><tr><td align="center">传输层</td><td align="center">TCP,UDP</td><td align="center"></td></tr><tr><td align="center">网络层</td><td align="center">IP</td><td align="center"></td></tr><tr><td align="center">数据链路层</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">物理层</td><td align="center">IEEE 802.1A</td><td align="center"></td></tr></tbody></table><ul><li>物理层：物理设备标准，模数转换，（网线，光纤）bit</li><li>数据链路层：数据MAC封装和解封，（设备交换机），帧</li><li>网络层：ip封装和解封，（路由器），数据报</li><li>传输层：传输数据协议和端口（tcp， udp）,报文段</li><li>会话层：建立数据传输通路，系统发起会话和接受会话请求</li><li>表示层：数据加密解密，压缩，形成视频，图片，音频</li><li>应用层：终端应用，（虚拟终端协议(TELNET，TELecommunications NETwork)、文件传输协议(FTP，File Transfer Protocol)、电子邮件传输协议(SMTP，Simple Mail Transfer Protocol)、域名服务(DNS，Domain Name Service)、网上新闻传输协议(NNTP，Net News Transfer Protocol)和超文本传送协议(HTTP，HyperText Transfer Protocol)等。）报文</li></ul><h3 id="常用协议-【C-：客户端；S：服务端】"><a href="#常用协议-【C-：客户端；S：服务端】" class="headerlink" title="常用协议 【C ：客户端；S：服务端】"></a>常用协议 【C ：客户端；S：服务端】</h3><ol><li>tcp<ul><li>三次握手（C-S,S-C,C-S）:第三次握手是可以携带数据的，前两次握手是不可以携带数据的; 【三次握手原因】防止历史连接初始化了连接，同步双方初始序列号，避免资源浪费<ul><li>一开始，客户端和服务端都处于 CLOSED 状态。先是服务端主动监听某个端口，处于 LISTEN状态</li><li>客户端会随机初始化序号（ client_isn ），将此序号置于 TCP 首部的「序号」字段中，同时把SYN 标志位置为 1 ，表示 SYN 报文。接着把第一个 SYN 报文发送给服务端，表示向服务端发起连接，该报文不包含应用层数据，之后客户端处</li><li>服务端收到客户端的 SYN 报文后，首先服务端也随机初始化自己的序号（ server_isn ），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 client_isn + 1 , 接着把 SYN 和 ACK 标志位置为 1 。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 SYN-RCVD 状态。</li><li>客户端收到服务端报文后，还要向服务端回应最后一个应答报文，首先该应答报文 TCP 首部ACK 标志位置为 1 ，其次「确认应答号」字段填入 server_isn + 1 ，最后把报文发送给服务端，这次报文可以携带客户到服务器的数据，之后客户端处于 ESTABLISHED 状态。服务器收到客户端的应答报文后，也进入 ESTABLISHED 状态。</li></ul></li><li>四次挥手（C-S,S-C,C-S,S-C）<ul><li>客户端打算关闭连接，此时会发送一个 TCP 首部 FIN 标志位被置为 1 的报文，也即 FIN报文，之后客户端进入 FIN_WAIT_1 状态。</li><li>服务端收到该报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSED_WAIT 状态。</li><li>客户端收到服务端的 ACK 应答报文后，之后进入 FIN_WAIT_2 状态。</li><li>等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入 LAST_ACK 状态。</li><li>客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入 TIME_WAIT 状态</li><li>服务器收到了 ACK 应答报文后，就进入了 CLOSED 状态，至此服务端已经完成连接的关闭。</li><li>客户端在经过 2MSL 一段时间后，自动进入 CLOSED 状态，至此客户端也完成连接的关闭。</li></ul></li><li>分片：MTU分片和MCC分片 ？</li><li>流量控制：滑动窗口：窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。</li><li>拥塞控制：【重传机制】<ul><li>超时重传：重传机制的其中一个方式，就是在发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的 ACK 确认应答报文，就会重发该数据【数据包丢失，确认应答丢失】，超时重传时间 RTO 的值应该略大于报文往返 RTT 的值。</li><li>快速重传机制：它不以时间为驱动，而是以数据驱动重传。</li><li>SACK：在 TCP 头部「选项」字段里加一个 SACK 的东西，它可以将缓存的地图发送给发送方，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以只重传丢失的数据。</li><li>D-SACK:使用了 SACK 来告诉「发送方」有哪些数据被重复接收了。</li></ul></li><li>全连接队列，半连接队列</li></ul></li><li>arp：通过ip地址查找到对应的mac地址（rarp：根据mac地址查找对应ip地址）<ul><li>主机会通过广播发送 ARP 请求，这个包中包含了想要知道的 MAC 地址的主机 IP 地址。当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，那么这个设备就将自己的 MAC 地址塞入 ARP 响应包返回给主机。</li></ul></li><li>dhcp: 自动配置ip地址<ul><li>客户端首先发起 DHCP 发现报文（DHCP DISCOVER） 的 IP 数据报，由于客户端没有 IP 地址，也不知道 DHCP 服务器的地址，所以使用的是 UDP 广播通信，其使用的广播目的地址是255.255.255.255（端口 67） 并且使用 0.0.0.0（端口 68） 作为源 IP 地址。DHCP 客户端将该IP 数据报传递给链路层，链路层然后将帧广播到所有的网络中设备。</li><li>DHCP 服务器收到 DHCP 发现报文时，用 DHCP 提供报文（DHCP OFFER） 向客户端做出响应。该报文仍然使用 IP 广播地址 255.255.255.255，该报文信息携带服务器提供可租约的 IP 地址、子网掩码、默认网关、DNS 服务器以及 IP 地址租用期。</li><li>客户端收到一个或多个服务器的 DHCP 提供报文后，从中选择一个服务器，并向选中的服务器发送 DHCP 请求报文（DHCP REQUEST进行响应，回显配置的参数。</li><li>最后，服务端用 DHCP ACK 报文对 DHCP 请求报文进行响应，应答所要求的参数。</li></ul></li><li>dns：通过域名逐级查找对应ip地址（根服务器，顶级域名服务器.com，权威服务器.server.com）<ol><li>客户端首先会发出一个 DNS 请求，问 <a href="http://www.server.com/">www.server.com</a> 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP&#x2F;IP 设置中填写的 DNS 服务器地址）。</li><li>本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 <a href="http://www.server.com,则它直接返回ip/">www.server.com，则它直接返回IP</a> 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 <a href="http://www.server.com/">www.server.com</a> 的IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。</li><li>根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“<a href="http://www.server.com/">www.server.com</a> 这个域名归.com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。” </li><li>本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 <a href="http://www.server.com/">www.server.com</a> 的 IP地址吗？”</li><li>顶级域名服务器说：“我给你负责 <a href="http://www.server.com/">www.server.com</a> 区域的权威 DNS 服务器的地址，你去问它应该能问到”。</li><li>本地 DNS 于是转向问权威 DNS 服务器：“老三，<a href="http://www.server.com对应的IP是啥呀？”">www.server.com对应的IP是啥呀？”</a> server.com的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。</li><li>权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。 8. 本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。</li></ol></li><li>nat：网络地址转换（私有ip转为公有ip）</li><li>ICMP 用于告知网络包传送过程中产生的错误以及各种控制信息。</li></ol><h3 id="常用设备"><a href="#常用设备" class="headerlink" title="常用设备"></a>常用设备</h3><ol><li>交换机：两层网络设备，端口无mac地址（包含对应的MAC-端口映射表：根据目的MAC查找对应端口，如未查到，发送数据包到除源端口外的所有端口，获得响应后记录到表中）</li><li>路由器：三层网络设备，端口含ip，mac地址</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> basic </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>software-manage</title>
      <link href="/2022/07/06/soft-manage/"/>
      <url>/2022/07/06/soft-manage/</url>
      
        <content type="html"><![CDATA[<h1 id="软件工程整体流程"><a href="#软件工程整体流程" class="headerlink" title="软件工程整体流程"></a>软件工程整体流程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h2><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3>]]></content>
      
      
      
        <tags>
            
            <tag> basic </tag>
            
            <tag> manage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cephfs</title>
      <link href="/2022/07/06/storage/cephfs/"/>
      <url>/2022/07/06/storage/cephfs/</url>
      
        <content type="html"><![CDATA[<h1 id="ceph-文件存储总结"><a href="#ceph-文件存储总结" class="headerlink" title="ceph 文件存储总结"></a>ceph 文件存储总结</h1><h2 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h2><ol><li>Monitor ceph 管理节点，保存并维护各个map信息和权限，日志等集群管理内容</li><li>MDS  元数据服务器，创建，修改，重命名，删除文件，文件夹等服务的提供者，同时包含挂载和卸载部分。<ol><li>MDSDaemon mds守护进程，mds创建时通过它来引导其他部分的启动和正常执行内容</li><li>MDSRank&#x2F;MDRankDispatcher, mds的主要消息分发器，和Monitor等集群通信的通过Beacon分发器使用Monc传递消息</li><li>Server,  重点业务执行部分，元数据的处理大多位于此</li><li>MDCache。 mds缓存处理，对业务快速响应的支持</li><li>MDLog， mds日志操作，每个元数据操作先写入日志，确保数据不丢失之后通过日志下刷落盘持久化。</li></ol></li><li>OSD  实际存储组件，存储数据和元数据的磁盘管理，底层数据存储原理位于此<ol><li>rados 一个文件对应多个对象，一个文件夹默认对应一个对象，默认对象大小为4M，超出部分存入下一个对象</li><li>pg， 每个对象对应一个pg，映射关系通过hash完成</li><li>osd， 每个pg对应多个osd，映射关系为crush算法。osd直接控制每个对象的数据块存储在磁盘的位置，以及日志的存储等内容。</li></ol></li></ol><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><ol><li>Server–handle_client_mkdir()<ol><li>获取或创建当前父级目录的信息，并创建Dentry和父级目录的Dir相连接</li><li>创建空Inode，并和Dentry连接，放入projected队列中</li><li>创建或查找对应dir，并和inode连接</li><li>early replay</li><li>写入日志，EUpdate</li><li>回复客户端，并将inode移出projected队列</li></ol></li></ol><h3 id="ceph-fuse"><a href="#ceph-fuse" class="headerlink" title="ceph-fuse"></a>ceph-fuse</h3><ol><li>client 向 Monitor 权限认证并订阅monmap，fsmap，osdmap</li><li>client 向 mds 发送挂载申请，并获取挂载目录 的inode信息</li><li>client 内核操作，将inode信息更新到vfs中，方便后续使用</li></ol><h3 id="mds-状态切换"><a href="#mds-状态切换" class="headerlink" title="mds 状态切换"></a>mds 状态切换</h3><p>1. </p>]]></content>
      
      
      
        <tags>
            
            <tag> storage </tag>
            
            <tag> ceph </tag>
            
            <tag> client </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>disk-manage</title>
      <link href="/2022/07/06/storage/disk/"/>
      <url>/2022/07/06/storage/disk/</url>
      
        <content type="html"><![CDATA[<h1 id="磁盘分析"><a href="#磁盘分析" class="headerlink" title="磁盘分析"></a>磁盘分析</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ul><li>scsi</li><li>raid</li></ul><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><h3 id="固态磁盘"><a href="#固态磁盘" class="headerlink" title="固态磁盘"></a>固态磁盘</h3><h3 id="机械磁盘"><a href="#机械磁盘" class="headerlink" title="机械磁盘"></a>机械磁盘</h3>]]></content>
      
      
      
        <tags>
            
            <tag> basic </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tool</title>
      <link href="/2022/07/06/tools/tools/"/>
      <url>/2022/07/06/tools/tools/</url>
      
        <content type="html"><![CDATA[<h2 id="git-命令：整体流程，先pull获取最新代码，合并后提交本地，之后push"><a href="#git-命令：整体流程，先pull获取最新代码，合并后提交本地，之后push" class="headerlink" title="git 命令：整体流程，先pull获取最新代码，合并后提交本地，之后push"></a>git 命令：整体流程，先pull获取最新代码，合并后提交本地，之后push</h2><ul><li><p>git init 初始化git本地仓库</p></li><li><p>git log 展示提交日志</p><ul><li>git log –pretty&#x3D;oneline 线性展示日志</li><li>git log –graph以树形展示日志</li></ul></li><li><p>git reflog 展示操作日志</p></li><li><p>git reset –soft HEAD^ 返回上次提交</p></li><li><p>git rm –cached <code>&lt;file&gt;</code>  从暂存区删除文件，但不改变文件区</p></li><li><p>git status 当前状态</p></li><li><p>git commit -m “note”提交代码</p></li><li><p>git remote 查看远程状态</p><ul><li>git remote -v 显示详细远程状态</li></ul></li><li><p>git push origin [master&#x2F;dev]推送分支</p></li><li><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;  拉取分支</p></li><li><p>git clone <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:…&#x2F;.git从远程克隆项目</p></li><li><p>git rebase 变基，将修改前的基础转换为最新状态</p></li><li><p>git branch [name]创建分支</p><ul><li>git checkout [name] 切换分支</li><li>git branch查看分支</li><li>git merge [name]合并分支<ul><li>git merge –no-ff -m “merge with no-ff” dev合并生成新的提交，当分支删除，信息仍然存在</li></ul></li><li>git branch -d [name]删除分支</li><li>git branch -D [name]强行删除分支</li><li>git stash 储存当前分支状态</li><li>git stash list 查看可回复状态</li><li>git stash apply 回复+ git shash drop 删除</li><li>git stash pop 回复并删除</li><li>git cherry-pick [number] 将master修改的bug复制到当前分支</li></ul></li><li><p>git tag 查看所有标签</p><ul><li>git tag [name] 打开新的标签， 状态为当前状态</li><li>git tag [name] [number] 提交number对应状态的标签name</li><li>git show [name]显示标签内容</li><li>git tag -d [name]删除标签</li><li>git push origin :refs&#x2F;tags&#x2F;[name] 删除远程标签</li></ul></li></ul><h2 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h2><ul><li><p>常用函数</p><ul><li>@deprecated 该类已过时</li><li>&#x2F;&#x2F;todo后期可添加内容</li></ul></li><li><p>常用快捷键</p><ul><li>http：get,post,delete,put用http Tools调试</li><li>相机图标截取当前线程状态 ：查看在运行中的线程</li><li>打断点，调试</li><li>找到实现 ctrl+点击   或者 前方图标</li><li>ctrl+shift+&#x2F;区块注释</li><li>Alt+Insert 产生构造方法、getter&#x2F;setter等方法</li><li>Ctrl+R替换</li><li>Shift+Enter 在当前行的下方开始新行</li><li>Ctrl+Alt+Enter 在当前行上方插入新行</li><li>Ctrl + Alt + b 转到实现</li><li>Ctrl+Alt+L 格式化代码</li><li>ctrl+Q 查看方法说明</li><li>Ctrl+D 复制光标所在行的内容，插入光标位置下面</li><li>psvnmain</li><li>sout默认输出</li><li>itarfor遍历</li></ul></li></ul><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><ul><li>ctrl+E    oepn folder explose</li></ul><h2 id="notepad"><a href="#notepad" class="headerlink" title="notepad"></a>notepad</h2><ul><li>ctrl d  复制当前行</li><li>ctrl l  删除当前行</li></ul><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>yy   复制光标当前行<br>n    粘贴剪切板的行到光标位置</p><h2 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h2><h2 id="linux-operate"><a href="#linux-operate" class="headerlink" title="linux operate"></a>linux operate</h2><p>deb<br>  其余文件，安装后覆盖到根目录<br>  DEBIAN<br>    control<br>      Package    程序名称    中间不能有空格<br>      Version    软件版本<br>      Description    程序说明<br>      Section    软件类别    utils, net, mail, text, x11<br>      Priority    软件对于系统的重要程度    required, standard, optional, extra等；<br>      Essential    是否是系统最基本的软件包    yes&#x2F;no，若为yes,则不允许卸载（除非强制性卸载）<br>      Architecture    软件所支持的平台架构    i386, amd64, m68k, sparc, alpha, powerpc等<br>      Source    软件包的源代码名称<br>      Depends    软件所依赖的其他软件包和库文件    若依赖多个软件包和库文件，采用逗号隔开<br>      Pre-Depends    软件安装前必须安装、<br>      配置依赖性的软件包和库文件    常用于必须的预运行脚本需求<br>      Recommends    推荐安装的其他软件包和库文件<br>      Suggests    建议安装的其他软件包和库文件<br>    postinst(postinstallation)  负责完成安装包时的配置工作。如新安装或升级的软件重启服务。软件安装完后，执行该Shell脚本，一般用来配置软件执行环境，必须以“#!&#x2F;bin&#x2F;sh”为首行。<br>    postrm(postremove)  负责修改软件包链接或文件关联，或删除由它创建的文件。软件卸载后，执行该Shell脚本，一般作为清理收尾工作，必须以“#!&#x2F;bin&#x2F;sh”为首行<br>    preinst(preinstallation)   在Deb包文件解包之前（即软件安装前），将会运行该脚本。可以停止作用于待升级软件包的服务，直到软件包安装或升级完成。<br>    prerm(preremove) 该脚本负责停止与软件包相关联的daemon服务。它在删除软件包关联文件之前执行。<br>    copyright(版权)<br>    changlog(修订记录)<br>    conffiles</p><p>dpkg<br>  dkpg -b . mydeb.deb  打包<br>  dkpg -i mydeb.deb    装包（添加 –force-depends 强制安装）<br>  dpkg –unpack mydeb.deb  解压包，不安装<br>  dpkg -c mydeb.deb    查看deb包文件内容<br>  dpkg –info mydeb.deb  查看deb包信息<br>  dpkg -L mydeb         列出deb包关联的文件<br>  dpkg -s|–status mydeb         查看deb包是否安装，查看安装信息<br>  dpkg -r mydeb         卸载deb包，保留配置文件<br>  dpkg -P|–purge mydeb         删除deb包，删除配置文件<br>  apt-get install .&#x2F;mydeb.deb    安装依赖包，安装deb包~</p>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
